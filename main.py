import openai
import telebot
from telebot import types
import config

task = {}
count = {}
text = {}
completion = {}

openai.api_key = config.openai_token
token = config.telebot_token
bot = telebot.TeleBot(token)


@bot.message_handler(commands=["start"])
def start(message):
    repkey = types.ReplyKeyboardMarkup(row_width=1)
    gen = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å AIü§ñ')
    rate = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µüåü')
    support = types.KeyboardButton('–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞üë•')
    repkey.add(gen, rate, support)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ "
                                      "OpenAI. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, —Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ "
                                      "–∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É. –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ "
                                      "–±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=repkey)


@bot.message_handler(commands=["help"])
def helpme(message):
    bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç b—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –∫–æ–º–ø–∞–Ω–∏–∏ openAI"
                                      ". –î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –æ–¥–Ω–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –∏ –Ω–µ –ø—Ä–∏—Å–ª–µ–¥—É–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö "
                                      "—Ü–µ–ª–µ–π.\n–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/dalle - –∑–∞–ø—É—Å—Ç–∏—Ç—å "
                                      "–Ω–µ–π—Ä–æ—Å–µ—Ç—å DALL-E\n/chatgpt - –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ChatGPT\n/help - –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ "
                                      "—Å–æ–æ–±—â–µ–Ω–∏–µ")


@bot.message_handler(commands=['chatgpt'])
def startgpt(message):
    data = bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è ChatGPT –æ—Ç OpenAI. –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '
                                             '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.\n–ü—Ä–∏–º–µ—Ä—ã:\n"–ù–∞–ø–∏—à–∏ Telegram –±–æ—Ç–∞"\n"–ß—Ç–æ –ª—É—á—à–µ, '
                                             'Western Digital –∏–ª–∏ Kingston?"')
    bot.register_next_step_handler(data, chatgpt2)


def chatgpt(message):
    repkey = types.ReplyKeyboardMarkup(row_width=1)
    stop = types.KeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ChatGPT‚õî')
    repkey.add(stop)
    bot.delete_message(message.chat.id, message_id=msg_id)
    data = bot.send_message(message.chat.id, completion[message.chat.id]['choices'][0]['message']['content'],
                            reply_markup=repkey)
    bot.register_next_step_handler(data, chatgpt2)


def chatgpt2(message):
    global completion
    text[message.chat.id] = message.text
    if text[message.chat.id] == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ChatGPT‚õî':
        start(message)
        return
    else:
        pass
    try:
        msg = bot.send_message(message.chat.id, "ChatGPT –ø–µ—á–∞—Ç–∞–µ—Ç...")
        global msg_id
        msg_id = msg.message_id
        completion[message.chat.id] = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": text[message.chat.id]}]
        )
    except openai.error.RateLimitError:
        bot.send_message(message.chat.id, "–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å API, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    print(completion[message.chat.id])
    chatgpt(message)


@bot.message_handler(commands=['dalle'])
def prompt(message):
    data = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    bot.register_next_step_handler(data, number)


def number(message):
    task[message.chat.id] = message.text
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="1")
    button2 = types.InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="2")
    button3 = types.InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="3")
    button4 = types.InlineKeyboardButton(text="4Ô∏è‚É£", callback_data="4")
    keyboard.add(button1, button2)
    keyboard.add(button3, button4)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", reply_markup=keyboard)


def send_photo(message):
    global response
    for i in range(count[message.chat.id]):
        msg = bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        msg_id = msg.message_id
        try:
            response = openai.Image.create(
                prompt=task[message.chat.id],
                n=1,
                size="1024x1024"
            )
        except:
            bot.send_message(message.chat.id, "–û–π... –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–µ "
                                              "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ OpenAI")
        image_url = response['data'][0]['url']
        bot.delete_message(message.chat.id, message_id=msg_id)
        bot.send_photo(message.chat.id, image_url)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")


@bot.message_handler(func=lambda call: True)
def echo_all(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if message.text == '–í—ã–±—Ä–∞—Ç—å AIü§ñ':
        keyboard = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="DALL-E-2", callback_data="dalle")
        button2 = types.InlineKeyboardButton(text="ChatGPT", callback_data="gpt")
        keyboard.add(button1, button2)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ AI", reply_markup=keyboard)
    elif message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µüåü':
        bot.send_message(message.chat.id, "–ü–æ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –±–æ—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π "
                                          "–ø–µ—Ä–µ–¥–∞—á–∏ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º: https://forms.gle/AQi1jYNCUkYVVjmX9")
    elif message.text == '–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞üë•':
        bot.send_message(message.chat.id, "–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @sloniko")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    if call.data == "1":
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫—É")
        count[call.message.chat.id] = 1
        send_photo(call.message)
    elif call.data == "2":
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        count[call.message.chat.id] = 2
        send_photo(call.message)
    elif call.data == "3":
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        count[call.message.chat.id] = 3
        send_photo(call.message)
    elif call.data == "4":
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ 4 –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        count[call.message.chat.id] = 4
        send_photo(call.message)
    elif call.data == "dalle":
        bot.answer_callback_query(callback_query_id=call.id, text="DALL-E-2 –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        prompt(call.message)
    elif call.data == "gpt":
        bot.answer_callback_query(callback_query_id=call.id, text="ChatGPT –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        startgpt(call.message)


if __name__ == '__main__':
    bot.infinity_polling()
